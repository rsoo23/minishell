Mandatory Part
--------------
Compile
-------
[x] - USE make -n to see if compilation use -Wall -Wextra -Werror if not use
  invalid compilation flags
- minishell Compile without errors if not use flags
[x] - makefile must not re-link
 Yes No

Simple Command & global
-----------------------
[x] - Execute a simple command with an absolute path like /bin/ls or any other
  command without options
- How many global variables? why? Give a concrete example of why it feels
  mandatory or logical.
[x] - Test an empty command.
[x] - Test only spaces or tabs.
- if something crashes use the crash flag.
- if something is not working use the incomplete work flag.
 Yes No
 
Arguments & history
-------------------
[x] - Execute a simple command with an absolute path like /bin/ls or any other
  command with arguments but without quotes and double quotes
[x] - Repeat multiple times with different commands and arguments
- if something crashes use the crash flag.
- if something is not working use the incomplete work flag.
 Yes No

echo
----
[x] - Execute the echo command with or without arguments or -n
[x] - Repeat multiple times with different arguments
- if something crashes use the crash flag.
- if something is not working use the incomplete work flag.
 Yes No
 
exit
----
[x] - Execute exit command with or without arguments
[x] - Repeat multiple times with different arguments
- Don't forget to relaunch the minishell
- if something crashes use the crash flag.
- if something is not working use the incomplete work flag.
 Yes No
 
Double Quotes
-------------
[x] - Execute a simple command with arguments but this time double quotes (you
  should include whitespaces) (echo "cat srcs/main.c | sort > out")
[x] - a command like : echo "cat lol.c | cat > lol.c"
[x] - anything except $
- if something crashes use the crash flag.
- if something is not working use the incomplete work flag.
 Yes No

Single Quotes
-------------
[x] - Execute commands with single quotes as an argument
[x] - Try empty arguments
[x] - Try environment variables, whitespaces, pipes, redirection in the single
  quotes
[x] - echo '$USER' must print $USER
- Nothing should be interpreted
 Yes No

env
---
[x] - Check if env shows you the current environment variables
 Yes No

export
------
[x] - Export environment variables, create new ones and replace old ones
[x] - Check them with env

[x] - Double quotes
[x] - Single quotes
 Yes No

unset
-----
[x] - Export environment variables, create new ones and replace old ones
[x] - Use unset to remove some of them
[x] - Multiple variables
- Check the result with env
 Yes No
 
cd
--
[x] - Use the command cd to move the working directory and check if you are in the
  right directory with /bin/ls
[x] - Repeat multiple times with working and not working cd
[x] - try '.' '..' as arguments too
[x] - cd notes or srcs
 Yes No

pwd
---
[x] - Use the command pwd
[x] - Repeat multiple times in multiple directories
 Yes No

Pipes
-----
[x] - Execute commands with pipes like 'cat file | grep bla | more'
[x] - Repeat multiple times with different commands and arguments
[x] - Try some failing commands like 'ls filethatdoesntexist | grep bla | more'
[x] - Try to mix pipes and redirections.
 Yes No

Go Crazy and history
--------------------
[x] - type a command line then use ctrl-C then press enter the buffer should be
  clean and nothing try to execute.
[x] - Can we navigate through history with up and down and retry some command
[x] - Execute commands that should not work like 'dsbksdgbksdghsd' and check if
  the shell doesn't crash and prints an error
[x] - cat | cat | ls behave "normally"
- Try to execute a long command with a ton of arguments
- Have fun with that beautiful minishell and enjoy it
 Yes No

Environment Variables
---------------------
- [x] Execute echo with some $ variables as arguments
- [x] Check that $ is interpreted as an environment variable
- [x] Check that double quotes interpolate $
- [x] Check that $USER exists or set it.
- [x] echo "$USER" should print the value of $USER
 Yes No

Bonus
[x] echo "'$USER'": 'rsoo'
[x] echo '"$USER"': "$USER"

------------------------------------------------------------------------------------------------
WIP:

Return value of a process
-------------------------
[x] - Execute a simple command with an absolute path like /bin/ls or any other
  command with arguments but without quotes and double quotes then execute
  echo $?
- Check the printed value. You can repeat the same in bash and compare it.
[x] - Repeat multiple times with different commands and arguments, use some failing
  commands like '/bin/ls filethatdoesntexist'
[x] - anything like expr $? + $?
- if something crashes use the crash flag.
- if something is not working use the incomplete work flag.
 Yes No

Signals
-------
[x] - Try ctrl-C in an empty prompt should show a new line with a new prompt (no ^C)
[x] - Try ctrl-\ in an empty prompt should not do anything
[x] - Try ctrl-D in an empty prompt should quit minishell --> RELAUNCH!
[x] - Try ctrl-C in a prompt after you wrote some stuff should show a new line
  with a new prompt (no ^C)
[x] - The buffer should be clean too, press "enter" to make sure nothing from the
  old line is executed.
[x] - Try ctrl-D in a prompt after you wrote some stuff should not do anything
[x] - Try ctrl-\ in a prompt after you wrote some stuff should not do anything!
[x] - Try ctrl-C after running a blocking command like cat without arguments or
  grep “something“
[x] - Try ctrl-\ after running a blocking command like cat without arguments or
  grep “something“
[x] - Try ctrl-D after running a blocking command like cat without arguments or
  grep “something“
[x] - Repeat multiple times with different commands
- if something crashes use the crash flag.
- if something is not working use the incomplete work flag.
 Yes No

Relative Path
-------------
[x] - Execute commands but this time use a relative path
[x] - Repeat multiple times in multiple directories with a complex relative path
  (lots of ..)
 Yes No

Environment Path
----------------
[x] - Execute commands but this time without any path. (ls, wc, awk etc...)
[x] - Unset the $PATH and check if it is not working anymore
[x] - Set the $PATH to a multiple directory value (directory1:directory2) and
  check that directories are checked in order from left to right
 Yes No

Redirection
-----------
[x] - Execute commands with redirections < and/or >
[x] - Repeat multiple times with different commands and arguments and sometimes
  change > with >>
[x] - Check if multiple of the same redirections fail
[x] - Test << redirection (it doesn't need to update history).
 Yes No
